{"version":3,"sources":["components/base/Button.tsx","utils/classUtils.ts","components/PageTitle.tsx","components/base/DragUpload.tsx","constants/acceptedTypes.ts","pages/tools/SubtitleRecognitionPage.tsx","constants/config.tsx","utils/routeUtils.ts","components/NavBar.tsx","pages/HomePage.tsx","pages/ToolsPage.tsx","pages/tools/SimpleToolPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Button","props","className","children","classNames","classes","filter","Boolean","join","PageTitle","title","subtitle","Dragger","Upload","DragUpload","hint","accept","push","replaceAll","multiple","console","log","toString","getHint","VIDEOS","Editor","imageRef","createRef","videoRef","useState","width","height","size","setSize","playing","setPlaying","setMaxHeight","setMinHeight","setMaxWidth","setMinWidth","minHeight","minWidth","maxHeight","maxWidth","defaultLines","setDefaultLines","verticalDragBoundFunc","pos","x","y","horizontalDragBoundFunc","ref","src","video","onLoadedMetadata","current","videoWidth","videoHeight","onEnded","image","points","tension","strokeWidth","stroke","draggable","dragBoundFunc","onDragMove","evt","target","onClick","paused","play","then","_","pause","id","value","event","progress","document","getElementById","pageX","offsetLeft","offsetWidth","currentTime","duration","SubtitleRecognitionPage","setVideo","uploaded","setUploaded","uploadProps","name","action","showUploadList","beforeUpload","onChange","info","status","file","fileList","handleUploaded","URL","createObjectURL","TOOLS","tip","isSimplePage","page","form","type","label","key","selectOptions","getToolRoute","tool","PopoverDropDownItem","PopoverNavItem","open","as","Fragment","enter","enterFrom","enterTo","leave","leaveFrom","leaveTo","Panel","NavBar","menuOpen","setMenuOpen","to","alt","map","item","index","HomePage","ToolCard","ToolsPage","SimpleToolPage","htmlFor","option","options","fontSize","defaultValue","defaultLanguage","App","Helmet","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.7d0922b5.chunk.js","sourcesContent":["import { FC } from 'react'\n\ninterface ButtonProps {\n\n}\n\nconst Button: FC<ButtonProps> = (props) => {\n    return (\n        <>\n            <button className=\"bg-purple-500 px-5 py-3 rounded-lg text-white hover:bg-purple-600 transform hover:scale-105 scale-100 transition\">\n                {props.children}\n            </button>\n        </>\n    );\n}\n\nexport default Button;\n","export const classNames = (...classes: string[]) => {\n    return classes.filter(Boolean).join(' ')\n}\n","import { FC } from 'react'\n\ninterface IPageTitleProps {\n    title: string\n    subtitle?: string\n}\n\nconst PageTitle: FC<IPageTitleProps> = (props) => {\n    return (\n        <>\n            <div className=\"text-center font-bold text-6xl mt-24\">\n                {props.title}\n            </div>\n            <div className=\"text-center font-normal text-2xl mt-6\">\n                {props.subtitle}\n            </div>\n        </>\n    );\n}\n\nexport default PageTitle;\n","import { FC } from 'react'\nimport {DraggerProps} from \"antd/lib/upload\";\nimport {Upload} from \"antd\";\n\nconst {Dragger} = Upload\n\nconst DragUpload: FC<DraggerProps> = (props) => {\n    const getHint = () => {\n        let hint = []\n        if (props.accept) {\n            hint.push(`支持 ${props.accept.replaceAll(',', '、')} 格式`)\n        }\n        hint.push(props.multiple ? `一次可上传多个文件` : `一次仅上传一个文件`)\n        console.log(hint)\n        return hint.toString().replaceAll(',', '，')\n    }\n    return (\n        <>\n            <div className=\"mt-10 h-40\">\n                <Dragger {...props}>\n                    <p className=\"ant-upload-text\">点击或将文件拖拽到这里上传</p>\n                    <p className=\"ant-upload-hint\">{getHint()}</p>\n                </Dragger>\n            </div>\n        </>\n    );\n}\n\nexport default DragUpload;\n","export const IMAGES = '.png,.jpg'\nexport const VIDEOS = '.mp4'\n","import {createRef, FC, RefObject, useState} from 'react'\nimport NavBar from \"../../components/NavBar\";\nimport {Button, UploadProps} from \"antd\";\nimport PageTitle from \"../../components/PageTitle\";\nimport {Image, Layer, Line, Stage} from \"react-konva\";\nimport {Vector2d} from \"konva/lib/types\";\nimport DragUpload from \"../../components/base/DragUpload\";\nimport {VIDEOS} from \"../../constants/acceptedTypes\";\n\nconst SubtitleRecognitionPage: FC = () => {\n    const [video, setVideo] = useState<string>();\n    const [uploaded, setUploaded] = useState(false);\n    const uploadProps: UploadProps = {\n        name: 'file',\n        action: '#',\n        accept: VIDEOS,\n        showUploadList: false,\n        beforeUpload() {\n            return false;\n        },\n        onChange(info) {\n            const {status} = info.file\n            console.log(status)\n            if (status !== 'uploading') {\n                console.log(info.file.size)\n                console.log(info.file, info.fileList);\n                handleUploaded()\n            }\n            setVideo(URL.createObjectURL(info.file))\n        }\n    }\n    const handleUploaded = () => {\n        setUploaded(true)\n    }\n\n    return (\n        <>\n            <NavBar/>\n            <div className=\"px-20\">\n                <PageTitle title=\"字幕识别\" subtitle=\"从视频中提取字幕，输出 srt 文件\"/>\n                {!uploaded && <DragUpload {...uploadProps} />}\n                {uploaded && <div className=\"mt-20\">\n                  <Editor video={video!}/>\n                </div>}\n            </div>\n        </>\n    );\n}\n\ninterface IEditorProps {\n    video: string\n}\n\nconst Editor: FC<IEditorProps> = (props) => {\n    const imageRef: RefObject<any> = createRef();\n    const videoRef: RefObject<HTMLVideoElement> = createRef();\n    const [size, setSize] = useState({ width: 50, height: 50 });\n    const [playing, setPlaying] = useState(false);\n\n    const [, setMaxHeight] = useState(0);\n    const [, setMinHeight] = useState(0);\n\n    const [, setMaxWidth] = useState(0);\n    const [, setMinWidth] = useState(0);\n\n    const [defaultLines, setDefaultLines] = useState({\n        minHeight: 10,\n        minWidth: 10,\n        maxHeight: 0,\n        maxWidth: 0\n    });\n\n    const verticalDragBoundFunc = (pos: Vector2d) => {\n        return {\n            x: 0,\n            y: pos.y\n        }\n    }\n    const horizontalDragBoundFunc = (pos: Vector2d) => {\n        return {\n            x: pos.x,\n            y: 0\n        }\n    }\n\n    return (\n        <>\n            <div className=\"flex justify-center mt-10\">\n                <video className={'absolute'} ref={videoRef} src={props.video} onLoadedMetadata={() => {\n                    setSize({\n                        width: videoRef.current!.videoWidth,\n                        height: videoRef.current!.videoHeight\n                    });\n\n                    setMinHeight(10)\n                    setMinWidth(10)\n                    setMaxHeight(videoRef.current!.videoHeight - 10)\n                    setMaxWidth(videoRef.current!.videoWidth - 10)\n\n                    setDefaultLines({\n                        ...defaultLines,\n                        maxHeight: videoRef.current!.videoHeight - 10,\n                        maxWidth: videoRef.current!.videoWidth - 10\n                    })\n                }} onEnded={() => setPlaying(false)}/>\n                <Stage height={size.height} width={size.width} className=\"rounded-lg\">\n                    <Layer>\n                        <Image\n                            ref={imageRef}\n                            image={videoRef.current!}\n                            x={0}\n                            y={0}\n                            width={size.width}\n                            height={size.height}\n                        />\n                        <Line points={[0, defaultLines.minHeight, size.width, defaultLines.minHeight]} tension={1} strokeWidth={8} stroke=\"purple\"\n                              draggable\n                              dragBoundFunc={verticalDragBoundFunc} onDragMove={evt => {\n                            setMinHeight(evt.target.y())\n                        }}/>\n                        <Line points={[0, defaultLines.maxHeight, size.width, defaultLines.maxHeight]} tension={1} strokeWidth={8} stroke=\"purple\"\n                              draggable\n                              dragBoundFunc={verticalDragBoundFunc} onDragMove={evt => {\n                            setMaxHeight(evt.target.y())\n                        }}/>\n                        <Line points={[defaultLines.minWidth, 0, defaultLines.minWidth, size.height]} tension={1} strokeWidth={8} stroke=\"purple\"\n                              draggable\n                              dragBoundFunc={horizontalDragBoundFunc} onDragMove={evt => {\n                            setMinWidth(evt.target.x())\n                        }}/>\n                        <Line points={[defaultLines.maxWidth, 0, defaultLines.maxWidth, size.height]} tension={1} strokeWidth={8} stroke=\"purple\"\n                              draggable\n                              dragBoundFunc={horizontalDragBoundFunc} onDragMove={evt => {\n                            setMaxWidth(evt.target.x())\n                        }}/>\n                    </Layer>\n                </Stage>\n            </div>\n            <div className=\"flex justify-center items-center space-x-4\">\n                <Button onClick={() => {\n                    if (videoRef.current!.paused) {\n                        videoRef.current!.play().then(_ => _)\n                    } else {\n                        videoRef.current!.pause()\n                    }\n                    setPlaying(!videoRef.current!.paused)\n                }}>{playing ? '暂停' : '播放'}</Button>\n                <progress className=\"rounded-lg bg-blue-500 w-full cursor-pointer\" id=\"progress\" value={0}\n                          onClick={event => {\n                              let progress = document.getElementById('progress')\n                              let pos = (event.pageX - progress!.offsetLeft) / progress!.offsetWidth\n                              videoRef.current!.currentTime = pos * videoRef.current!.duration\n                          }}>\n                    <span id=\"progress-bar\" className=\"bg-blue-500\"/>\n                </progress>\n            </div>\n        </>\n    );\n}\n\nexport default SubtitleRecognitionPage;\n","import SubtitleRecognitionPage from \"../pages/tools/SubtitleRecognitionPage\";\nimport {Tool} from \"../interfaces/tools\";\nimport {IMAGES, VIDEOS} from \"./acceptedTypes\";\n\nexport const TOOLS: Tool[] = [\n    {\n        id: 'subtitle-recognition',\n        name: '字幕识别',\n        tip: '从视频中提取字幕，输出 srt 文件',\n        isSimplePage: false,\n        page: <SubtitleRecognitionPage />\n    },\n    {\n        id: 'text-to-video',\n        name: '文字转视频',\n        tip: '用文字自动生成视频，文字先转成声音，然后再生成文字字幕',\n        isSimplePage: true,\n        form: [\n            {\n                type: 'number',\n                label: '语速',\n                key: 'rate',\n            },\n            {\n                type: 'select',\n                label: '声音',\n                key: 'voice',\n                selectOptions: [\n                    {\n                        value: \"Microsoft Server Speech Text to Speech Voice (zh-CN, XiaoxiaoNeural)\",\n                        label: \"Microsoft Server Speech Text to Speech Voice (zh-CN, XiaoxiaoNeural):晓晓\"\n                    },\n                    {\n                        value: \"Microsoft Server Speech Text to Speech Voice (zh-CN, XiaohanNeural)\",\n                        label: \"Microsoft Server Speech Text to Speech Voice (zh-CN, XiaohanNeural):晓涵\"\n                    },\n                    {\n                        value: \"Microsoft Server Speech Text to Speech Voice (zh-CN, XiaomoNeural)\",\n                        label: \"Microsoft Server Speech Text to Speech Voice (zh-CN, XiaomoNeural):晓墨\"\n                    },\n                    {\n                        value: \"Microsoft Server Speech Text to Speech Voice (zh-CN, XiaoruiNeural)\",\n                        label: \"Microsoft Server Speech Text to Speech Voice (zh-CN, XiaoruiNeural):晓睿\"\n                    },\n                    {\n                        value: \"Microsoft Server Speech Text to Speech Voice (zh-CN, XiaoxuanNeural)\",\n                        label: \"Microsoft Server Speech Text to Speech Voice (zh-CN, XiaoxuanNeural):晓萱\"\n                    },\n                    {\n                        value: \"Microsoft Server Speech Text to Speech Voice (zh-CN, XiaoyouNeural)\",\n                        label: \"Microsoft Server Speech Text to Speech Voice (zh-CN, XiaoyouNeural):晓悠\"\n                    },\n                    {\n                        value: \"Microsoft Server Speech Text to Speech Voice (zh-CN, YunyangNeural)\",\n                        label: \"Microsoft Server Speech Text to Speech Voice (zh-CN, YunyangNeural):云扬(男)\"\n                    },\n                    {\n                        value: \"Microsoft Server Speech Text to Speech Voice (zh-CN, YunxiNeural)\",\n                        label: \"Microsoft Server Speech Text to Speech Voice (zh-CN, YunxiNeural):云希(男)\"\n                    },\n                    {\n                        value: \"Microsoft Server Speech Text to Speech Voice (zh-CN, YunyeNeural)\",\n                        label: \"Microsoft Server Speech Text to Speech Voice (zh-CN, YunyeNeural):云野(男)\"\n                    }\n                ]\n            },\n            {\n                type: 'select',\n                label: '风格',\n                key: 'style',\n                selectOptions: [\n                    {value: \"assistant\", label: \"assistant:助理\"},\n\n\n                    {value: \"chat\", label: \"chat:聊天\"},\n\n\n                    {value: \"customerservice\", label: \"customerservice:客服\"},\n\n\n                    {value: \"newscast\", label: \"newscast:新闻\"},\n\n\n                    {value: \"affectionate\", label: \"affectionate:撒娇\"},\n\n\n                    {value: \"angry\", label: \"angry:生气\"},\n\n\n                    {value: \"calm\", label: \"calm:平静\"},\n\n\n                    {value: \"cheerfulm\", label: \"cheerful:开心\"},\n\n\n                    {value: \"disgruntled\", label: \"disgruntled:不满\"},\n\n\n                    {value: \"fearful\", label: \"fearful:害怕\"},\n\n\n                    {value: \"gentle\", label: \"gentle:温柔\"},\n\n\n                    {value: \"lyrical\", label: \"lyrical:抒情\"},\n\n\n                    {value: \"sad\", label: \"sad:悲伤\"},\n\n\n                    {value: \"serious\", label: \"serious:严肃\"},\n\n\n                    {value: \"embarrassed\", label: \"embarrassed:尴尬\"},\n\n\n                    {value: \"depressed\", label: \"depressed:沮丧\"},\n\n\n                    {value: \"narration\", label: \"narration:叙述\"},\n\n                ]\n            },\n            {\n                type: 'code',\n                label: '源文本',\n                key: 'src'\n            }\n        ]\n    },\n    {\n        id: 'mp3-extraction',\n        name: '提取MP3音频',\n        tip: '把视频中的音频保存为 .mp3 音频文件。只需要把需要转换的 文件给出，就可以得到音频的MP3文件',\n        isSimplePage: true,\n        form: [\n            {\n                type: 'file',\n                uploadProps: {\n                    accept: VIDEOS,\n                    multiple: true\n                },\n                label: '文件',\n                key: 'src'\n            }\n        ]\n    },\n    {\n        id: 'pmask',\n        name: '人脸盖猫',\n        tip: '在视频里面找到人脸的位置，在上面盖上一个面具（缺省是一个 猫头），从而避免肖像侵权等问题。',\n        isSimplePage: true,\n        form: [\n            {\n                type: 'file',\n                label: '遮挡图',\n                tip: '最好是PNG',\n                uploadProps: {\n                    accept: IMAGES,\n                    multiple: false\n                },\n                key: 'mask_file'\n            },\n            {\n                type: 'number',\n                label: '时间步长',\n                tip: '默认1.0s，如果脸部动作比较剧烈，可以适当缩短到0.2-0.3s',\n                key: 'step'\n            },\n            {\n                type: 'number',\n                label: '最长保持时间',\n                tip: '用于噪音导致偶尔脸部找不到的情况，默认3.0s',\n                key: 'face_retain_gap'\n            },\n            {\n                type: 'file',\n                label: '视频文件',\n                uploadProps: {\n                    accept: VIDEOS,\n                    multiple: true\n                },\n                tip: '进行处理的文件或者文件列表',\n                key: 'src'\n            },\n        ]\n    }\n]\n","import {Tool} from \"../interfaces/tools\";\n\nexport const getToolRoute = (tool: Tool) => {\n    return '/' + tool.id;\n}\n","import {FC, Fragment, useState} from 'react'\nimport {Popover, Transition} from \"@headlessui/react\";\nimport {classNames} from \"../utils/classUtils\";\nimport {TOOLS} from \"../constants/config\";\nimport {Link} from \"react-router-dom\";\nimport {getToolRoute} from \"../utils/routeUtils\";\nimport {ChevronRightIcon, MenuIcon} from \"@heroicons/react/outline\";\n\nconst NavBar: FC = () => {\n    const [menuOpen, setMenuOpen] = useState(true);\n    return (\n        <>\n            <nav\n                className=\"flex flex-col justify-between md:flex-row md:space-x-10 border-b-2 border-gray-100 py-6 px-10\">\n                <div\n                    className=\"flex flex-col md:flex-row justify-start md:items-center space-y-4 md:space-y-0 md:space-x-10 mt-4 md:mt-0\">\n                    <div className=\"flex justify-between\">\n                        <div>\n                            <Link to=\"/\"><img className=\"h-8 w-auto\"\n                                              src=\"https://mirav.cn/assets/images/mira_color@2x.png\" alt=\"logo\"/></Link>\n                        </div>\n                        <div className=\"flex justify-end hover:bg-gray-100 p-1 rounded-lg md:hidden\">\n                            <MenuIcon className=\"h-6 w-auto\" onClick={() => setMenuOpen(!menuOpen)}/>\n                        </div>\n                    </div>\n                    {menuOpen && <>\n                      <PopoverNavItem name=\"单视频处理\">\n                          {TOOLS.map((item, index) => (\n                              <Link to={getToolRoute(item)} key={index}>\n                                  <PopoverDropDownItem>\n                                      <div>\n                                          <p className=\"text-lg font-bold\">{item.name}</p>\n                                          <p>{item.tip}</p>\n                                      </div>\n                                  </PopoverDropDownItem>\n                              </Link>\n                          ))}\n\n                        <Link to={'/tools'}>\n                          <PopoverDropDownItem>\n                            <div className=\"flex items-center space-between justify-between\">\n                              <div className=\"flex justify-start\">\n                                <span>所有工具</span>\n                              </div>\n                              <div className=\"flex justify-end\">\n                                <ChevronRightIcon className=\"w-4 h-4\"/>\n                              </div>\n                            </div>\n                          </PopoverDropDownItem>\n                        </Link>\n\n                      </PopoverNavItem>\n\n                      <PopoverNavItem name=\"电影搜索\">\n\n                        <PopoverDropDownItem>\n                          <div>素材搜索</div>\n                        </PopoverDropDownItem>\n                        <PopoverDropDownItem>\n                          <div>视频标签搜索</div>\n                        </PopoverDropDownItem>\n                        <PopoverDropDownItem>\n                          <div>电影搜索</div>\n                        </PopoverDropDownItem>\n\n                      </PopoverNavItem>\n\n                    </>}\n                </div>\n                <div\n                    className=\"flex flex-col md:flex-row justify-end md:items-center space-y-4 md:space-y-0 md:space-x-10 mt-4 md:mt-0\">\n                    {menuOpen && <>\n                      <PopoverNavItem name=\"public2\">\n                        <span>public2</span>\n                      </PopoverNavItem>\n                    </>}\n                </div>\n            </nav>\n\n            <div className=\"flex justify-between border-b-2 border-gray-100 py-6 px-10 hidden\">\n                <div className=\"flex justify-start items-center space-x-10\">\n                    <Link to=\"/\">\n                        <img className=\"h-8 w-auto\" src=\"https://mirav.cn/assets/images/mira_color@2x.png\" alt=\"logo\"/>\n                    </Link>\n                    <div className=\"hidden md:flex space-x-10\">\n                        {/* Edit left aligned navbar items here */}\n                        <PopoverNavItem name=\"单视频处理\">\n                            {TOOLS.map((item, index) => (\n                                <Link to={getToolRoute(item)} key={index}>\n                                    <PopoverDropDownItem>\n                                        <div>\n                                            <p className=\"text-lg font-bold\">{item.name}</p>\n                                            <p>{item.tip}</p>\n                                        </div>\n                                    </PopoverDropDownItem>\n                                </Link>\n                            ))}\n\n                            <Link to={'/tools'}>\n                                <PopoverDropDownItem>\n                                    <div className=\"flex items-center space-between justify-between\">\n                                        <div className=\"flex justify-start\">\n                                            <span>所有工具</span>\n                                        </div>\n                                        <div className=\"flex justify-end\">\n                                            <ChevronRightIcon className=\"w-4 h-4\"/>\n                                        </div>\n                                    </div>\n                                </PopoverDropDownItem>\n                            </Link>\n\n                        </PopoverNavItem>\n\n                        <PopoverNavItem name=\"电影搜索\">\n\n                            <PopoverDropDownItem>\n                                <div>素材搜索</div>\n                            </PopoverDropDownItem>\n                            <PopoverDropDownItem>\n                                <div>视频标签搜索</div>\n                            </PopoverDropDownItem>\n                            <PopoverDropDownItem>\n                                <div>电影搜索</div>\n                            </PopoverDropDownItem>\n\n                        </PopoverNavItem>\n\n                    </div>\n                </div>\n                <div className=\"flex justify-center items-center space-x-10\">\n                    <div className=\"hidden md:flex\">\n                        {/* Edit center aligned navbar items here */}\n                    </div>\n                </div>\n                <div className=\"flex justify-end items-center space-x-10\">\n                    <MenuIcon className=\"h-6 w-6 md:hidden\" />\n                    <div className=\"hidden md:flex\">\n                        {/* Edit right aligned navbar items here */}\n                        <PopoverNavItem name=\"public2\">\n                            <span>public2</span>\n                        </PopoverNavItem>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n}\n\ninterface IPopoverNavItemProps {\n    name: string\n}\n\nconst PopoverDropDownItem: FC = (props) => {\n    return (\n        <div className=\"hover:bg-gray-100 p-2 rounded-lg transition text-black\">\n            {props.children}\n        </div>\n    );\n}\n\nconst PopoverNavItem: FC<IPopoverNavItemProps> = (props) => {\n    return (\n        <Popover>\n            {(open) => (\n                <>\n                    <Popover.Button\n                        className={classNames(\n                            open ? 'text-gray-900' : 'text-gray-500',\n                            'inline-flex items-center text-base font-medium hover:text-gray-900 focus:outline-none'\n                        )}>\n                        <span>{props.name}</span>\n                    </Popover.Button>\n                    <Transition\n                        as={Fragment}\n                        enter=\"transition ease-out duration-200\"\n                        enterFrom=\"opacity-0 translate-y-1\"\n                        enterTo=\"opacity-100 translate-y-0\"\n                        leave=\"transition ease-in duration-150\"\n                        leaveFrom=\"opacity-100 translate-y-0\"\n                        leaveTo=\"opacity-0 translate-y-1\"\n                    >\n                        <Popover.Panel className=\"absolute z-10\">\n                            <div className=\"rounded-lg shadow-lg bg-white ring-1 ring-black ring-opacity-5 p-2 mt-2\">\n                                {props.children}\n                            </div>\n                        </Popover.Panel>\n                    </Transition>\n                </>\n            )}\n        </Popover>\n    );\n}\n\nexport default NavBar;\n","import { FC } from 'react'\nimport Button from \"../components/base/Button\";\nimport NavBar from \"../components/NavBar\";\nimport {Link} from \"react-router-dom\";\n\nconst HomePage: FC = () => {\n    return (\n        <>\n            <NavBar />\n\n            <div className=\"text-center font-bold text-8xl mt-24\">米拉视频</div>\n\n            <div className=\"text-center font-normal text-5xl mt-12\">\n                <div>视频和智能</div>\n                <div>碰撞的实验室</div>\n            </div>\n\n            <Link to={'/tools'}>\n                <div className=\"text-center mt-20\">\n                    <Button>查看所有工具</Button>\n                </div>\n            </Link>\n        </>\n    );\n}\n\nexport default HomePage;\n","import { FC } from 'react'\nimport NavBar from \"../components/NavBar\";\nimport {Tool} from \"../interfaces/tools\";\nimport {Link} from \"react-router-dom\";\nimport {getToolRoute} from \"../utils/routeUtils\";\nimport {TOOLS} from \"../constants/config\";\n\nconst ToolsPage: FC = () => {\n    return (\n        <>\n            <NavBar />\n            <div className=\"px-20 mt-20\">\n                <div className=\"grid gap-y-10 grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 justify-items-center\">\n                    {TOOLS.map(item => (\n                        <ToolCard tool={item} key={item.id} />\n                    ))}\n                </div>\n            </div>\n        </>\n    );\n}\n\ninterface IToolCardProps {\n    tool: Tool\n}\n\nconst ToolCard: FC<IToolCardProps> = ({ tool }) => {\n    return (\n        <>\n            <Link to={getToolRoute(tool)}>\n                <div className=\"w-80 h-36 px-10 py-8 shadow rounded-lg transform hover:scale-105 transition text-black\">\n                    <p className=\"text-lg font-bold\">{tool.name}</p>\n                    <p className=\"\">{tool.tip}</p>\n                </div>\n            </Link>\n        </>\n    );\n}\n\nexport default ToolsPage;\n","import { FC } from 'react'\nimport NavBar from \"../../components/NavBar\";\nimport {Tool} from \"../../interfaces/tools\";\nimport PageTitle from \"../../components/PageTitle\";\nimport Button from \"../../components/base/Button\";\nimport Editor from \"@monaco-editor/react\";\nimport {Upload} from \"antd\";\nimport DragUpload from \"../../components/base/DragUpload\";\n\nconst {Dragger} = Upload\n\ninterface ISimpleToolPageProps {\n    tool: Tool\n}\n\nconst SimpleToolPage: FC<ISimpleToolPageProps> = ({ tool }) => {\n    return (\n        <>\n            <NavBar />\n            <div className=\"px-20\">\n                <PageTitle title={tool.name} subtitle={tool.tip} />\n                <div className=\"mt-16 space-y-4\">\n                    {tool.form?.map(item => (\n                        <div className=\"space-y-2 items-center\" key={item.key}>\n                            <label className=\"text-lg font-bold space-x-2\" htmlFor={item.key}>\n                                <span>{item.label}</span>\n                                <span className=\"text-sm text-gray-500 font-normal\">{item.tip}</span>\n                            </label>\n                            {(item.type === 'text' && <input type=\"text\" key={item.key} name={item.key} className=\"border rounded-lg px-5 py-3 focus:outline-none focus:ring-2 focus:ring-purple-500\" />) ||\n                            (item.type === 'number' && <input type=\"number\" key={item.key} name={item.key} className=\"w-full border rounded-lg px-5 py-3 focus:outline-none focus:ring-2 focus:ring-purple-500\" />) ||\n                            (item.type === 'text_area' && <textarea key={item.key} name={item.key} className=\"w-full h-40 resize-none border rounded-lg px-5 py-3 focus:outline-none focus:ring-2 focus:ring-purple-500\" />) ||\n                            (item.type === 'select' && <select key={item.key} name={item.key} className=\"w-full border rounded-lg px-5 py-3 focus:outline-none focus:ring-2 focus:ring-purple-500\">\n                                {item.selectOptions!.map(option => (<option key={option.value} value={option.value}>{option.label}</option>))}\n                            </select>) ||\n                            (item.type === 'code' && <Editor className=\"w-full border rounded-lg py-3 focus:outline-none focus:ring-2 focus:ring-purple-500\" height={'30rem'} options={{ fontSize: 20 }} defaultValue={'💡输入文字，🔔可以自动🖱变成有音效的😱音频了'} defaultLanguage={'html'} />) ||\n                            (item.type === 'file' && <DragUpload {...item.uploadProps}/>)}\n                        </div>\n                    ))}\n                </div>\n                <div className=\"flex justify-center p-16\">\n                    <Button>提交</Button>\n                </div>\n            </div>\n        </>\n    );\n}\n\nexport default SimpleToolPage;\n","import React from 'react';\nimport {BrowserRouter as Router, Route, Switch} from \"react-router-dom\";\nimport HomePage from \"./pages/HomePage\";\nimport {TOOLS} from \"./constants/config\";\nimport {getToolRoute} from \"./utils/routeUtils\";\nimport SubtitleRecognitionPage from \"./pages/tools/SubtitleRecognitionPage\";\nimport ToolsPage from \"./pages/ToolsPage\";\nimport SimpleToolPage from \"./pages/tools/SimpleToolPage\";\nimport {Helmet} from \"react-helmet\";\n\nconst App = () => {\n    return (\n        <>\n            <Helmet>\n                <title>米拉视频</title>\n            </Helmet>\n\n            <div className=\"container mx-auto\">\n                <Router>\n                    <Switch>\n                        <Route exact path={'/'} children={<HomePage />} />\n                        <Route path={'/tools'} children={<ToolsPage />} />\n                        <Route path={'/test'} children={<SubtitleRecognitionPage />} />\n                        {TOOLS.map(item => (\n                            (item.isSimplePage && <Route key={item.id} path={getToolRoute(item)} children={<SimpleToolPage tool={item} />} />) ||\n                            (<Route key={item.id} path={getToolRoute(item)} children={item.page} />)\n                        ))}\n                    </Switch>\n                </Router>\n            </div>\n        </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.less';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}